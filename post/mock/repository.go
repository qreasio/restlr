// Code generated by MockGen. DO NOT EDIT.
// Source: post/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/qreasio/restlr/model"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// PostByID mocks base method
func (m *MockRepository) PostByID(ctx context.Context, postID uint64, postType string) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostByID", ctx, postID, postType)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostByID indicates an expected call of PostByID
func (mr *MockRepositoryMockRecorder) PostByID(ctx, postID, postType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostByID", reflect.TypeOf((*MockRepository)(nil).PostByID), ctx, postID, postType)
}

// QueryPosts mocks base method
func (m *MockRepository) QueryPosts(ctx context.Context, listRequest model.ListFilter) ([]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryPosts", ctx, listRequest)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryPosts indicates an expected call of QueryPosts
func (mr *MockRepositoryMockRecorder) QueryPosts(ctx, listRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryPosts", reflect.TypeOf((*MockRepository)(nil).QueryPosts), ctx, listRequest)
}

// PostsByIDs mocks base method
func (m *MockRepository) PostsByIDs(ctx context.Context, postType string, idList []uint64) ([]*model.Post, []uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostsByIDs", ctx, postType, idList)
	ret0, _ := ret[0].([]*model.Post)
	ret1, _ := ret[1].([]uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PostsByIDs indicates an expected call of PostsByIDs
func (mr *MockRepositoryMockRecorder) PostsByIDs(ctx, postType, idList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostsByIDs", reflect.TypeOf((*MockRepository)(nil).PostsByIDs), ctx, postType, idList)
}

// ParseStickyPostID mocks base method
func (m *MockRepository) ParseStickyPostID(option string) map[int]bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseStickyPostID", option)
	ret0, _ := ret[0].(map[int]bool)
	return ret0
}

// ParseStickyPostID indicates an expected call of ParseStickyPostID
func (mr *MockRepositoryMockRecorder) ParseStickyPostID(option interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseStickyPostID", reflect.TypeOf((*MockRepository)(nil).ParseStickyPostID), option)
}

// CommentsByPostIDs mocks base method
func (m *MockRepository) CommentsByPostIDs(commentPostIDStr []string) ([]*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentsByPostIDs", commentPostIDStr)
	ret0, _ := ret[0].([]*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommentsByPostIDs indicates an expected call of CommentsByPostIDs
func (mr *MockRepositoryMockRecorder) CommentsByPostIDs(commentPostIDStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentsByPostIDs", reflect.TypeOf((*MockRepository)(nil).CommentsByPostIDs), commentPostIDStr)
}

// GetPredecessorVersion mocks base method
func (m *MockRepository) GetPredecessorVersion(ctx context.Context, idList []uint64) (map[uint64]map[int]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPredecessorVersion", ctx, idList)
	ret0, _ := ret[0].(map[uint64]map[int]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPredecessorVersion indicates an expected call of GetPredecessorVersion
func (mr *MockRepositoryMockRecorder) GetPredecessorVersion(ctx, idList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPredecessorVersion", reflect.TypeOf((*MockRepository)(nil).GetPredecessorVersion), ctx, idList)
}
