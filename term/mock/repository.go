// Code generated by MockGen. DO NOT EDIT.
// Source: term/repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/qreasio/restlr/model"
)

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// PostTermTaxonomyByIDs mocks base method
func (m *MockRepository) PostTermTaxonomyByIDs(ctx context.Context, idStringArray []string) (map[uint64][]*model.TermWithPostTaxonomy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostTermTaxonomyByIDs", ctx, idStringArray)
	ret0, _ := ret[0].(map[uint64][]*model.TermWithPostTaxonomy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostTermTaxonomyByIDs indicates an expected call of PostTermTaxonomyByIDs
func (mr *MockRepositoryMockRecorder) PostTermTaxonomyByIDs(ctx, idStringArray interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostTermTaxonomyByIDs", reflect.TypeOf((*MockRepository)(nil).PostTermTaxonomyByIDs), ctx, idStringArray)
}

// GetPostTaxonomyAndFormat mocks base method
func (m *MockRepository) GetPostTaxonomyAndFormat(ctx context.Context, idStringArr []string) (map[uint64][]*model.TermWithPostTaxonomy, map[uint64]map[string][]uint64, map[uint64]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostTaxonomyAndFormat", ctx, idStringArr)
	ret0, _ := ret[0].(map[uint64][]*model.TermWithPostTaxonomy)
	ret1, _ := ret[1].(map[uint64]map[string][]uint64)
	ret2, _ := ret[2].(map[uint64]string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetPostTaxonomyAndFormat indicates an expected call of GetPostTaxonomyAndFormat
func (mr *MockRepositoryMockRecorder) GetPostTaxonomyAndFormat(ctx, idStringArr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostTaxonomyAndFormat", reflect.TypeOf((*MockRepository)(nil).GetPostTaxonomyAndFormat), ctx, idStringArr)
}

// TermTaxonomyByTermIDListTaxonomy mocks base method
func (m *MockRepository) TermTaxonomyByTermIDListTaxonomy(termIDList []uint64, taxonomy string) ([]*model.TermTaxonomy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TermTaxonomyByTermIDListTaxonomy", termIDList, taxonomy)
	ret0, _ := ret[0].([]*model.TermTaxonomy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TermTaxonomyByTermIDListTaxonomy indicates an expected call of TermTaxonomyByTermIDListTaxonomy
func (mr *MockRepositoryMockRecorder) TermTaxonomyByTermIDListTaxonomy(termIDList, taxonomy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TermTaxonomyByTermIDListTaxonomy", reflect.TypeOf((*MockRepository)(nil).TermTaxonomyByTermIDListTaxonomy), termIDList, taxonomy)
}
